{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMClassification: 0.25.0+3d4f80d", "seed": 947234683, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='ResNet',\n        depth=18,\n        num_stages=4,\n        out_indices=(3, ),\n        style='pytorch'),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=10,\n        in_channels=512,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, )))\ndataset_type = 'ImageNet'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1)),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='ImageNet',\n        data_prefix='data/cifar-10-batches-dataset/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        ann_file='data/cifar-10-batches-dataset/train.txt',\n        classes='data/cifar-10-batches-dataset/classes.txt'),\n    val=dict(\n        type='ImageNet',\n        data_prefix='data/cifar-10-batches-dataset/val',\n        ann_file='data/cifar-10-batches-dataset/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        classes='data/cifar-10-batches-dataset/classes.txt'),\n    test=dict(\n        type='ImageNet',\n        data_prefix='data/imagenet/val',\n        ann_file='data/imagenet/meta/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(\n    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/HOME/scz5336/run/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[1])\nrunner = dict(type='EpochBasedRunner', max_epochs=2)\nwork_dir = 'work/resnet18_b32_cifar_10'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 947234683\n", "CLASSES": ["airplane", "frog", "dog", "horse", "truck", "bird", "cat", "ship", "deer", "automobile"]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.001, "memory": 902, "data_time": 0.02871, "loss": 1.86736, "time": 0.05161}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 902, "data_time": 0.00769, "loss": 1.2342, "time": 0.02687}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.001, "memory": 902, "data_time": 0.00827, "loss": 1.03314, "time": 0.02703}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.001, "memory": 902, "data_time": 0.00691, "loss": 0.94549, "time": 0.02668}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.001, "memory": 902, "data_time": 0.00729, "loss": 0.88429, "time": 0.02735}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 902, "data_time": 0.00632, "loss": 0.8299, "time": 0.02664}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 902, "data_time": 0.00679, "loss": 0.81907, "time": 0.02691}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 902, "data_time": 0.00735, "loss": 0.78266, "time": 0.0273}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 902, "data_time": 0.00701, "loss": 0.74636, "time": 0.02717}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 902, "data_time": 0.00737, "loss": 0.76188, "time": 0.02709}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 902, "data_time": 0.00747, "loss": 0.78785, "time": 0.02741}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 902, "data_time": 0.00695, "loss": 0.72057, "time": 0.0271}
{"mode": "val", "epoch": 1, "iter": 313, "lr": 0.001, "accuracy_top-1": 88.8}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 902, "data_time": 0.02082, "loss": 0.68092, "time": 0.0453}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "memory": 902, "data_time": 0.00029, "loss": 0.67425, "time": 0.02479}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0001, "memory": 902, "data_time": 0.00029, "loss": 0.65018, "time": 0.02482}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0001, "memory": 902, "data_time": 0.00024, "loss": 0.62447, "time": 0.02463}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.0001, "memory": 902, "data_time": 0.00023, "loss": 0.65852, "time": 0.0246}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.0001, "memory": 902, "data_time": 0.00026, "loss": 0.63871, "time": 0.02457}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.0001, "memory": 902, "data_time": 0.00028, "loss": 0.63329, "time": 0.02463}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.0001, "memory": 902, "data_time": 0.00029, "loss": 0.62914, "time": 0.02467}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.0001, "memory": 902, "data_time": 0.00029, "loss": 0.64002, "time": 0.02468}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.0001, "memory": 902, "data_time": 0.00029, "loss": 0.64437, "time": 0.02475}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.0001, "memory": 902, "data_time": 0.00029, "loss": 0.61044, "time": 0.02471}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.0001, "memory": 902, "data_time": 0.00029, "loss": 0.63045, "time": 0.02473}
{"mode": "val", "epoch": 2, "iter": 313, "lr": 0.0001, "accuracy_top-1": 91.56}
